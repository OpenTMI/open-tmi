name: Dockerimage

on:
  push:
    paths-ignore:
      - '**/*.md'
    branches:
      - master
  pull_request:
     paths-ignore:
      - '**/*.md'
  release:
env:
  IMAGE_NAME: OPENTMI

jobs:
  build-and-publish-latest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 # Checking out the repo
      
      - name: build
        run: docker build . -t image
      
      - name: resolve tag
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          
          
          # Use Docker `<branch>` tag convention
          [ "$VERSION" == "merge" ] && VERSION=$(git rev-parse --abbrev-ref HEAD)
          
          echo ::set-output name=docker_tag::${VERSION}
          echo tag=${VERSION}          
          
      
      - run: docker image ls
      
      - name: push
        run: |
          # create image id for ghcr
          IMAGE_ID=ghcr.io/opentmi/$IMAGE_NAME
          # tag image
          docker tag image $IMAGE_ID:$VERSION
          
           # Removes the original image tag
         
          echo Tags for $IMAGE_ID $(docker images $IMAGE_ID --format="{{ .Tag }}")
          
          # Login to ghcr
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          # push 
          docker push --all-tags $IMAGE_ID
          
          # create image id for dockerhub
          IMAGE_ID=opentmi/$IMAGE_NAME
          # tag image
          docker tag image $IMAGE_ID:$VERSION
          
           # Removes the original image tag
          docker rmi image
          echo Tags for $IMAGE_ID $(docker images $IMAGE_ID --format="{{ .Tag }}")
          
          # Login to Dockerhub
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login ghcr.io -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          # push 
          docker push --all-tags $IMAGE_ID
          
          docker rmi image


      
